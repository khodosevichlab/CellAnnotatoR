// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// estimateNewNegativeScores
NumericMatrix estimateNewNegativeScores(NumericMatrix expression, const std::vector<double>& max_scores, const std::vector<double>& neg_scores);
RcppExport SEXP _CellAnnotatoR_estimateNewNegativeScores(SEXP expressionSEXP, SEXP max_scoresSEXP, SEXP neg_scoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type max_scores(max_scoresSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type neg_scores(neg_scoresSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateNewNegativeScores(expression, max_scores, neg_scores));
    return rcpp_result_gen;
END_RCPP
}
// estimatePariwiseNegativeScoreChange
NumericMatrix estimatePariwiseNegativeScoreChange(int base_id, NumericMatrix neg_scores, const std::vector<double>& pos_scores);
RcppExport SEXP _CellAnnotatoR_estimatePariwiseNegativeScoreChange(SEXP base_idSEXP, SEXP neg_scoresSEXP, SEXP pos_scoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type base_id(base_idSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type neg_scores(neg_scoresSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type pos_scores(pos_scoresSEXP);
    rcpp_result_gen = Rcpp::wrap(estimatePariwiseNegativeScoreChange(base_id, neg_scores, pos_scores));
    return rcpp_result_gen;
END_RCPP
}
// estimateDNegativeScores
std::vector<double> estimateDNegativeScores(NumericMatrix d_scores, const std::vector<double>& pos_scores, const std::vector<double>& sum_scores, const std::vector<bool> is_positive);
RcppExport SEXP _CellAnnotatoR_estimateDNegativeScores(SEXP d_scoresSEXP, SEXP pos_scoresSEXP, SEXP sum_scoresSEXP, SEXP is_positiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type d_scores(d_scoresSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type pos_scores(pos_scoresSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sum_scores(sum_scoresSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool> >::type is_positive(is_positiveSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateDNegativeScores(d_scores, pos_scores, sum_scores, is_positive));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CellAnnotatoR_estimateNewNegativeScores", (DL_FUNC) &_CellAnnotatoR_estimateNewNegativeScores, 3},
    {"_CellAnnotatoR_estimatePariwiseNegativeScoreChange", (DL_FUNC) &_CellAnnotatoR_estimatePariwiseNegativeScoreChange, 3},
    {"_CellAnnotatoR_estimateDNegativeScores", (DL_FUNC) &_CellAnnotatoR_estimateDNegativeScores, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CellAnnotatoR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
